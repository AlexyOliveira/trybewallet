{"ast":null,"code":"// Coloque aqui suas actionsn\nimport getCurrencyApi from '../../services/CURRENCYapi';\nimport getFullCurrencyApi from '../../services/FullCurrencyAPI'; // Action types\n\nexport const SAVE_LOGED_EMAIL = 'SAVE_LOGED_EMAIL';\nexport const REQUEST_CURRENCIES = 'REQUEST_CURRENCIES';\nexport const REQUEST_CURRENCIES_SUCCESS = 'REQUEST_CURRENCIES_SUCCESS';\nexport const REQUEST_CURRENCIES_ERROR = 'REQUEST_CURRENCIES_ERROR';\nexport const SAVE_FORM = 'SAVE_FORM';\nexport const REQUEST_FULL_CURRENCIES_SUCCESS = 'REQUEST_FULL_CURRENCIES_SUCCESS';\nexport const DELETE_FROM_LIST = 'DELETE_FROM_LIST';\nexport const EDIT_FORM_MODE = 'EDIT_FORM_MODE';\nexport const SAVE_EDITED = 'SAVE_EDITED'; // Action creators\n\nexport const saveEdited = payload => ({\n  type: SAVE_EDITED,\n  payload\n});\nexport const editFormMode = payload => ({\n  type: EDIT_FORM_MODE,\n  payload\n});\nexport const deleteFromList = payload => ({\n  type: DELETE_FROM_LIST,\n  payload\n});\nexport const saveForm = payload => ({\n  type: SAVE_FORM,\n  payload\n});\nexport const saveLogedEmail = email => ({\n  type: SAVE_LOGED_EMAIL,\n  email\n});\nexport const requestCurrencies = () => ({\n  type: REQUEST_CURRENCIES\n});\nexport const responseCurrenciesSuccess = response => ({\n  type: REQUEST_CURRENCIES_SUCCESS,\n  response\n});\nexport const responseCurrenciesError = error => ({\n  type: REQUEST_CURRENCIES_ERROR,\n  error\n});\nexport const fetchCurrencies = () => async dispatch => {\n  // 1 Avisar que o fetch vai começar\n  dispatch({\n    type: 'LOADING'\n  });\n  dispatch(requestCurrencies());\n\n  try {\n    // 2 Fazer a requisição\n    const response = await getCurrencyApi();\n    dispatch({\n      type: 'LOADING_DONE'\n    }); // 3.1 Avisar que a requisição foi um sucesso e entregar a resposta\n\n    dispatch(responseCurrenciesSuccess(response));\n  } catch (error) {\n    // 3.2 Avisar que a requisição foi uma falha\n    dispatch(responseCurrenciesError(error));\n  }\n}; // full API\n\nexport const requestFullCurrencies = response => ({\n  type: REQUEST_FULL_CURRENCIES_SUCCESS,\n  response\n});\nexport const fetchFullCurrencies = () => async dispatch => {\n  // 1 Avisar que o fetch vai começar\n  dispatch(requestCurrencies());\n\n  try {\n    // 2 Fazer a requisição\n    const response = await getFullCurrencyApi(); // 3.1 Avisar que a requisição foi um sucesso e entregar a resposta\n\n    dispatch(requestFullCurrencies(response));\n  } catch (error) {\n    // 3.2 Avisar que a requisição foi uma falha\n    dispatch(responseCurrenciesError(error));\n  }\n};","map":{"version":3,"names":["getCurrencyApi","getFullCurrencyApi","SAVE_LOGED_EMAIL","REQUEST_CURRENCIES","REQUEST_CURRENCIES_SUCCESS","REQUEST_CURRENCIES_ERROR","SAVE_FORM","REQUEST_FULL_CURRENCIES_SUCCESS","DELETE_FROM_LIST","EDIT_FORM_MODE","SAVE_EDITED","saveEdited","payload","type","editFormMode","deleteFromList","saveForm","saveLogedEmail","email","requestCurrencies","responseCurrenciesSuccess","response","responseCurrenciesError","error","fetchCurrencies","dispatch","requestFullCurrencies","fetchFullCurrencies"],"sources":["/home/alexandre/Desktop/New Folder 1/trybewallet/src/redux/actions/index.js"],"sourcesContent":["// Coloque aqui suas actionsn\nimport getCurrencyApi from '../../services/CURRENCYapi';\nimport getFullCurrencyApi from '../../services/FullCurrencyAPI';\n// Action types\nexport const SAVE_LOGED_EMAIL = 'SAVE_LOGED_EMAIL';\nexport const REQUEST_CURRENCIES = 'REQUEST_CURRENCIES';\nexport const REQUEST_CURRENCIES_SUCCESS = 'REQUEST_CURRENCIES_SUCCESS';\nexport const REQUEST_CURRENCIES_ERROR = 'REQUEST_CURRENCIES_ERROR';\nexport const SAVE_FORM = 'SAVE_FORM';\nexport const REQUEST_FULL_CURRENCIES_SUCCESS = 'REQUEST_FULL_CURRENCIES_SUCCESS';\nexport const DELETE_FROM_LIST = 'DELETE_FROM_LIST';\nexport const EDIT_FORM_MODE = 'EDIT_FORM_MODE';\nexport const SAVE_EDITED = 'SAVE_EDITED';\n\n// Action creators\n\nexport const saveEdited = (payload) => ({\n  type: SAVE_EDITED,\n  payload,\n});\n\nexport const editFormMode = (payload) => ({\n  type: EDIT_FORM_MODE,\n  payload,\n});\n\nexport const deleteFromList = (payload) => ({\n  type: DELETE_FROM_LIST,\n  payload,\n});\n\nexport const saveForm = (payload) => ({\n  type: SAVE_FORM,\n  payload,\n});\n\nexport const saveLogedEmail = (email) => ({\n  type: SAVE_LOGED_EMAIL,\n  email,\n});\n\nexport const requestCurrencies = () => ({\n  type: REQUEST_CURRENCIES,\n});\n\nexport const responseCurrenciesSuccess = (response) => ({\n  type: REQUEST_CURRENCIES_SUCCESS,\n  response,\n});\n\nexport const responseCurrenciesError = (error) => ({\n  type: REQUEST_CURRENCIES_ERROR,\n  error,\n});\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  // 1 Avisar que o fetch vai começar\n  dispatch({type: 'LOADING'})\n  dispatch(requestCurrencies());\n\n  try {\n    // 2 Fazer a requisição\n    const response = await getCurrencyApi();\n    dispatch({type: 'LOADING_DONE'})\n    // 3.1 Avisar que a requisição foi um sucesso e entregar a resposta\n\n    dispatch(responseCurrenciesSuccess(response));\n  } catch (error) {\n    // 3.2 Avisar que a requisição foi uma falha\n    dispatch(responseCurrenciesError(error));\n  }\n};\n\n// full API\n\nexport const requestFullCurrencies = (response) => ({\n  type: REQUEST_FULL_CURRENCIES_SUCCESS,\n  response,\n});\n\nexport const fetchFullCurrencies = () => async (dispatch) => {\n  // 1 Avisar que o fetch vai começar\n  \n  dispatch(requestCurrencies());\n\n  try {\n    // 2 Fazer a requisição\n    const response = await getFullCurrencyApi();\n   \n    // 3.1 Avisar que a requisição foi um sucesso e entregar a resposta\n\n    dispatch(requestFullCurrencies(response));\n  } catch (error) {\n    // 3.2 Avisar que a requisição foi uma falha\n    dispatch(responseCurrenciesError(error));\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,4BAA3B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B,C,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,+BAA+B,GAAG,iCAAxC;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB,C,CAEP;;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,KAAc;EACtCC,IAAI,EAAEH,WADgC;EAEtCE;AAFsC,CAAd,CAAnB;AAKP,OAAO,MAAME,YAAY,GAAIF,OAAD,KAAc;EACxCC,IAAI,EAAEJ,cADkC;EAExCG;AAFwC,CAAd,CAArB;AAKP,OAAO,MAAMG,cAAc,GAAIH,OAAD,KAAc;EAC1CC,IAAI,EAAEL,gBADoC;EAE1CI;AAF0C,CAAd,CAAvB;AAKP,OAAO,MAAMI,QAAQ,GAAIJ,OAAD,KAAc;EACpCC,IAAI,EAAEP,SAD8B;EAEpCM;AAFoC,CAAd,CAAjB;AAKP,OAAO,MAAMK,cAAc,GAAIC,KAAD,KAAY;EACxCL,IAAI,EAAEX,gBADkC;EAExCgB;AAFwC,CAAZ,CAAvB;AAKP,OAAO,MAAMC,iBAAiB,GAAG,OAAO;EACtCN,IAAI,EAAEV;AADgC,CAAP,CAA1B;AAIP,OAAO,MAAMiB,yBAAyB,GAAIC,QAAD,KAAe;EACtDR,IAAI,EAAET,0BADgD;EAEtDiB;AAFsD,CAAf,CAAlC;AAKP,OAAO,MAAMC,uBAAuB,GAAIC,KAAD,KAAY;EACjDV,IAAI,EAAER,wBAD2C;EAEjDkB;AAFiD,CAAZ,CAAhC;AAKP,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;EACvD;EACAA,QAAQ,CAAC;IAACZ,IAAI,EAAE;EAAP,CAAD,CAAR;EACAY,QAAQ,CAACN,iBAAiB,EAAlB,CAAR;;EAEA,IAAI;IACF;IACA,MAAME,QAAQ,GAAG,MAAMrB,cAAc,EAArC;IACAyB,QAAQ,CAAC;MAACZ,IAAI,EAAE;IAAP,CAAD,CAAR,CAHE,CAIF;;IAEAY,QAAQ,CAACL,yBAAyB,CAACC,QAAD,CAA1B,CAAR;EACD,CAPD,CAOE,OAAOE,KAAP,EAAc;IACd;IACAE,QAAQ,CAACH,uBAAuB,CAACC,KAAD,CAAxB,CAAR;EACD;AACF,CAhBM,C,CAkBP;;AAEA,OAAO,MAAMG,qBAAqB,GAAIL,QAAD,KAAe;EAClDR,IAAI,EAAEN,+BAD4C;EAElDc;AAFkD,CAAf,CAA9B;AAKP,OAAO,MAAMM,mBAAmB,GAAG,MAAM,MAAOF,QAAP,IAAoB;EAC3D;EAEAA,QAAQ,CAACN,iBAAiB,EAAlB,CAAR;;EAEA,IAAI;IACF;IACA,MAAME,QAAQ,GAAG,MAAMpB,kBAAkB,EAAzC,CAFE,CAIF;;IAEAwB,QAAQ,CAACC,qBAAqB,CAACL,QAAD,CAAtB,CAAR;EACD,CAPD,CAOE,OAAOE,KAAP,EAAc;IACd;IACAE,QAAQ,CAACH,uBAAuB,CAACC,KAAD,CAAxB,CAAR;EACD;AACF,CAhBM"},"metadata":{},"sourceType":"module"}